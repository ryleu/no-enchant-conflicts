#!/usr/bin/env python3
"""
Copyright (C) 2022  ryleu

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published
by the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
"""

# dict of enchant name to equipment slot
enchants = {
    "Damage": "EnchantmentTarget.WEAPON",
    "Infinity": "EnchantmentTarget.BOW",
    "Multishot": "EnchantmentTarget.CROSSBOW",
    "Piercing": "EnchantmentTarget.CROSSBOW",
    "Protection": "protectionType == ProtectionEnchantment.Type.FALL ? EnchantmentTarget.ARMOR_FEET : EnchantmentTarget.ARMOR"
}

template = \
"""/*
Copyright (C) 2022  ryleu

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published
by the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

// This file was generated by generate.py

package me.ryleu.noec.mixins;

import net.minecraft.enchantment.Enchantment;
import net.minecraft.enchantment.EnchantmentTarget;
import net.minecraft.enchantment.{enchantment}Enchantment;
import net.minecraft.entity.EquipmentSlot;
import org.spongepowered.asm.mixin.Mixin;

@Mixin({enchantment}Enchantment.class)
public abstract class {enchantment}Mixin extends Enchantment {{
    public {enchantment}Mixin(Rarity weight,{extra} EquipmentSlot... slotTypes) {{
        super(weight, {target}, slotTypes);
    }}

    @Override()
    public boolean canAccept(Enchantment other) {{
        return true;
    }}
}}
"""

def main():
    for enchant in enchants.keys():
        print(f"Generating {enchant}...")
        with open(enchant + "Mixin.java", "w") as file:
            file.write(
                template.format(
                    enchantment = enchant,
                    target = enchants[enchant],
                    extra = " ProtectionEnchantment.Type protectionType," if enchant == "Protection" else ""
                )
            )
    print("Done!")
    print("Mixins JSON snippet:", "[", ",\n".join([ f"\"{enchant}Mixin\"" for enchant in enchants.keys()]), "]", sep = "\n")

if __name__ == "__main__":
    main()
